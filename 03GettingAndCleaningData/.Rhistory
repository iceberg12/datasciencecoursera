library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?svm
set.seed(1)
x=matrix(rnorm(20*2),ncol=2)
y=c(rep(-1,10),rep(1,10))
x[y==1,]=x[y==1,]+1
dim(x)
x
y
plot(x,col=(3-y))
col=3-y
col
?plot
plot(x)
plot(x,col=(4-y))
plot(x,col=(3-y))
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel="linear",cost=10,scale=FALSE)
plot(svmfit,dat)
svmfit$index
summary(svmfit)
svmfit=svm(y~.,data=dat,kernel="linear",cost=0.1,scale=FALSE)
plot(svmfit,dat)
svmfit$index
set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
xtest
summary(bestmod)
xtest=mtraix(rnorm(20*2),ncol=2)
xtest=matrix(rnorm(20*2),ncol=2)
ytest=sample(c(-1,1),20,rep=TRUE)
xtest
testdat
xtest[ytest==1,]=xtest[ytest==1,]+1
testdat=data.frame(x=xtest,y=as.factor(ytest))
ypred=predict(bestmod,testdat)
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ypred=predict(bestmod,testdat)
table(predict=ypred,truth=testdat$y)
x[y==1,]=x[y==1,]+0.5
plot(x,col=(y+5)/2,pch=19)
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel="linear")
summary(svmfit)
plot(svmfit,dat)
x
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat = data.frame(x=x,y=as.factor(y))
plot(x,col=y)
?sample
train=sample(200,100)
svmfit=svm(y~.,data=dat[train,],kernel="radial",gamma=1,cost=1)
plot(svmfit,dat[train,])
summary(svmfit)
svmfit=svm(y~.,data=dat[train,],kernel="radial",gamma=1,cost=1e5)
plot(svmfit,dat[train,])
set.seed(1)
tune.out=tune(svm,y~.,data=dat[train,],kernel="radial",ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
summary(tune.out)
table(true=dat[-train,"y"],pred=predict(tune.out$best.model,newx=dat[-train,]))
(21+18)/61
rocplot = function(pred,truth,...){
predob = prediction(pred,truth)
perf = performance(predob,"tpr","fpr")
plot(perf,...)
}
svmfit.opt=svm(y~.,data=dat[train,],kernel="radial",gamma=2,cost=1,decision.values=T)
fitted=attributes(predict(svmfit.opt,dat[train,],decision.values=TRUE))$decision.values
par(mfrow=c(1,2))
rocplot(fitted,dat[train,"y"],main="Training Data")
library(ROCR)
install.packages("ROCR")
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
rocplot = function(pred,truth,...){
predob = prediction(pred,truth)
perf = performance(predob,"tpr","fpr")
plot(perf,...)
}
rocplot(fitted,dat[train,"y"],main="Training Data")
svmfit.flex=svm(y~.,data=dat[train,],kernel="radial",gamma=50,cost=1,decision.values=T)
fitted=attributes(predict(svmfit.flex,dat[train,],decision.values=TRUE))$decision.values
rocplot(fitted,dat[train,"y"],main="Training Data")
fitted=attributes(predict(svmfit.opt,dat[-train,],decision.values=TRUE))$decision.values
rocplot(fitted,dat[-train,"y"],main="Test Data")
fitted=attributes(predict(svmfit.flex,dat[-train,],decision.values=TRUE))$decision.values
rocplot(fitted,dat[-train,"y"],add=T,col="red")
library(ISLR)
names(Khan)
dat=data.frame(x=Khan$xtrain,y=as.factor(Khan$ytrain))
out=svm(y~.,data=dat,kernel="linear",cost=10)
summary(out)
table(out$fitted,dat$y)
dat.te=data.fram(x=Khan$xtest,y=as.factor(Khan$ytest))
dat.te=data.frame(x=Khan$xtest,y=as.factor(Khan$ytest))
pred.te=predict(out,newdata=dat.te)
table(pred.te,dat.te$y)
library(datasets)
data(iris)
head(iris)
s <- iris[["Sepal.Length"]]
s
mean(s)
head(s)
colMeans(iris)
?colMeans
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
a = tapply(mtcars$hp, mtcars$cyl, mean)
a
a[4]
a$4
names(a)
a[["4"]]
a[["4"]] - a[["8"]]
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
head(iris)
tapply(iris$Sepal.Length, iris$Species=='virginica', mean)
tapply(iris$Sepal.Length[iris$Species=='virginica'], mean)
a = iris$Sepal.Length
b = a[iris$Species == 'virginica']
mean(b)
?sapply
209.21429-82.63636
x = matrix(c(1, 0, 0, 1), 2, 2)
x
## Cache the inverse of a Matrix
## Create a matrix that caches its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
## Retrieve the inverse if it is cached.
## Otherwise, compute the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getmean()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
a = cacheSolve(x)
x
type(x)
types(x)
class(x)
## Cache the inverse of a Matrix
## Create a matrix that caches its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
## Retrieve the inverse if it is cached.
## Otherwise, compute the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
a = cacheSolve(x)
x
m = x
m
a = cacheSolve(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1, 2, 3))
tete <- makeVector(c(1, 2, 3))
tete
cachemean(tete)
## Cache the inverse of a Matrix
## Create a matrix that caches its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
## Retrieve the inverse if it is cached.
## Otherwise, compute the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInv(inv)
inv
}
a = makeCacheMatrix(x)
a
x
cacheSolve(a)
y <- matrix(c(2, 0, 0, 2), 2, 2)
cacheSolve(makeCacheMatrix(y))
str(lm)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
?gl
gl(2,5)
GL(40,10)
gl(40,10)
f = gl(40,10)
str(f)
summary(f)
?sample
?rpois
str(rpois)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
?dnorm
?qpois
?rbinom
?system.time
?root
swirl()
library(swirl)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome")
ucscDb <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
dbDisconnect(ucscDb)
result
ucscDb <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
?fetch
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
if (!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/houses.csv", method = "curl")
list.files("./data")
?read.csv2
list.files("./data")
getdir
getwd()
setwd("~/Dropbox/R/03GettingAndCleaningData")
if (!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/houses.csv", method = "curl")
list.files("./data")
data <- read.csv("./data/cameras.csv")
head(data)
head(data)
view(data)
View(data)
data <- read.csv("./data/cameras.csv", sep = ",", header = TRUE)
names(data)
data <- read.csv("./data/cameras.csv",
sep = ",",
header = TRUE,
na.strings = "NA")
View(data)
data <- read.csv("./data/houses.csv",
sep = ",",
header = TRUE,
na.strings = "NA")
names(data)
View(data)
data <- read.csv("./data/houses.csv",
sep = ",",
header = TRUE,
na.strings = "")
class(data$Region)
class(data$REGION)
class(data$ACR)
a = c(1,2,3,4,5)
a == 3
data[2,"ACR"]
data[2,"ACR"]==2
agricultureLogical <- (data$ACR == 3 & data$AGS == 6)
head(agricultureLogical,10)
which(head(agricultureLogical,10))
which(head(agricultureLogical,10)==TRUE)
which(head(agricultureLogical,10)==FALSE)
head(which(agricultureLogical),3)
install.packages("jpeg")
library(jpeg)
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "./data/img.jpg", method = "curl")
list.files("./data")
img <- readJPEG(source, native = FALSE)
img <- readJPEG("./data/img.jpg", native = TRUE)
?quantile
quantile(x,  probs = c(0.3, 0.8))
View(img)
img
quantile(img,  probs = c(0.3, 0.8))
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fielUrl1, destfile = "./data/GDP.csv", method = "curl")
download.file(fileUrl1, destfile = "./data/GDP.csv", method = "curl")
download.file(fileUrl2, destfile = "./data/edu.csv", method = "curl")
list.files("./data")
gdp <- read.csv("./data/GDP.csv")
View(gdp)
?read.csv
gdp <- read.csv("./data/GDP.csv",
header = FALSE,
skip = 5)
View(gdp)
gdp <- read.csv("./data/GDP.csv",
header = FALSE,
skip = 5, nrows = 190)
View(gdp)
edu <- read.csv("./data/edu.csv",
header = TRUE)
View(edu)
names(gdp)
merge(gdp, edu, by.x="V1", by.y="CountryCode", all=TRUE)
a = merge(gdp, edu, by.x="V1", by.y="CountryCode", all=TRUE)
View(a)
a = gdp$V1 %in% edu$CountryCode
a
which(a)
length(a)
length(which(a)
)
?sort
length(which(gdp$V1 %in% edu$CountryCode))
?sort
?order
?sort
?merge
combine = merge(gdp, edu, by.x = "V1", by.y = "CountryCode")
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
View(combine)
View(combine)
?order
combineSorted = combine[order(combine$V5)]
combineSorted = combine[order(combine$V5),]
View(combineSorted)
combineSorted = combine[order(combine$V5),descreasing=TRUE]
combineSorted = combine[order(combine$V5,descreasing=TRUE),]
names(combine)
sorted = combine[order(combine$V5),]
View(sorted)
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine[order(combine$V5),]
a = combine[order(combine$V5),]
View(a)
gdp <- read.csv2("./data/GDP.csv",
header = FALSE,
skip = 5, nrows = 190)
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
View(gdp)
?read.csv
gdp <- read.csv("./data/GDP.csv",
header = FALSE, decimal=",",
skip = 5, nrows = 190)
gdp <- read.csv("./data/GDP.csv",
header = FALSE, dec=",",
skip = 5, nrows = 190)
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine[1,V5]
combine[1,"V5"]
combine$V5 = as.numeric(combine$V5)
View(combine)
View(gdp)
combine$V5 = as.numeric(sub(",", ".", combine$V5, fixed = TRUE))
View(combine)
combine$V5 = as.numeric(sub(",", ".", combine$V5, fixed = TRUE))
View(combine)
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine
View(combine)
combine[1,2]
as.numeric(combine[1,2])
as.numeric("2.584")
combine$V5 = as.numeric(sub(",", "", combine$V5, fixed = TRUE))
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(sub(",", "", combine$V5, fixed = TRUE))
View(combine)
combine$V5 = as.numeric(sub(",", ".", combine$V5, fixed = TRUE))
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
View(combine)
?sub
sub(",", ".", "1,233", fixed = TRUE)
sub(",", "", "1,233", fixed = TRUE)
sub(",", "", "1,233,32", fixed = TRUE)
gsub(",", "", "1,233,32", fixed = TRUE)
gsub(",", "", "1,233,32", fixed = TRUE)
combine$V5 = as.numeric(gsub(",", ".", combine$V5))
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", ".", combine$V5))
combine = merge(gdp[,c(1,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", "", combine$V5))
a = combine[order(combine$V5),]
View(a)
a$Long.Name[13]
combine = merge(gdp[,c(1,5)], edu[,c(1,2,3)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", "", combine$V5))
a = combine[order(combine$V5),]
View(a)
tapply(a$V5,a$Income.Group,mean)
tapply(a$row.names,a$Income.Group,mean)
length(a$row.names)
length(a$"row.names")
names(a)
combine = merge(gdp[,c(1,2,5)], edu[,c(1,2)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", "", combine$V5))
a = combine[order(combine$V5),]
View(a)
tapply(a$V2,a$Income.Group,mean)
length(a$V2)
length(a$Income.Group)
combine = merge(gdp[,c(1,2,5)], edu[,c(1,2,3)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", "", combine$V5))
a = combine[order(combine$V5),]
tapply(a$V2,a$Income.Group,mean)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
a$V2 = cut2(a$V2, g=4)
a$V2
summary(a$V2)
?cut
a$V2 = cut2(a$V2, g=5)
4
a$V2 = cut2(a$V2, g=4)
combine = merge(gdp[,c(1,2,5)], edu[,c(1,2,3)], by.x = "V1", by.y = "CountryCode")
combine$V5 = as.numeric(gsub(",", "", combine$V5))
a = combine[order(combine$V5),]
a$Long.Name[13]
a$V2 = cut2(a$V2, g=4)
a = combine[order(combine$V5),]
a$V2 = cut2(a$V2, g=5)
summary(a$V2)
table(a$V2, a$Income.Group)
